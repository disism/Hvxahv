// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BotNoticeClient is the client API for BotNotice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BotNoticeClient interface {
	Notice(ctx context.Context, in *BotNoticeSend, opts ...grpc.CallOption) (*BotNoticeReply, error)
}

type botNoticeClient struct {
	cc grpc.ClientConnInterface
}

func NewBotNoticeClient(cc grpc.ClientConnInterface) BotNoticeClient {
	return &botNoticeClient{cc}
}

func (c *botNoticeClient) Notice(ctx context.Context, in *BotNoticeSend, opts ...grpc.CallOption) (*BotNoticeReply, error) {
	out := new(BotNoticeReply)
	err := c.cc.Invoke(ctx, "/hvxahv.v1.proto.BotNotice/notice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotNoticeServer is the server API for BotNotice service.
// All implementations must embed UnimplementedBotNoticeServer
// for forward compatibility
type BotNoticeServer interface {
	Notice(context.Context, *BotNoticeSend) (*BotNoticeReply, error)
	mustEmbedUnimplementedBotNoticeServer()
}

// UnimplementedBotNoticeServer must be embedded to have forward compatible implementations.
type UnimplementedBotNoticeServer struct {
}

func (UnimplementedBotNoticeServer) Notice(context.Context, *BotNoticeSend) (*BotNoticeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notice not implemented")
}
func (UnimplementedBotNoticeServer) mustEmbedUnimplementedBotNoticeServer() {}

// UnsafeBotNoticeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BotNoticeServer will
// result in compilation errors.
type UnsafeBotNoticeServer interface {
	mustEmbedUnimplementedBotNoticeServer()
}

func RegisterBotNoticeServer(s grpc.ServiceRegistrar, srv BotNoticeServer) {
	s.RegisterService(&BotNotice_ServiceDesc, srv)
}

func _BotNotice_Notice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotNoticeSend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotNoticeServer).Notice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hvxahv.v1.proto.BotNotice/notice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotNoticeServer).Notice(ctx, req.(*BotNoticeSend))
	}
	return interceptor(ctx, in, info, handler)
}

// BotNotice_ServiceDesc is the grpc.ServiceDesc for BotNotice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BotNotice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hvxahv.v1.proto.BotNotice",
	HandlerType: (*BotNoticeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "notice",
			Handler:    _BotNotice_Notice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/util/v1/bot.proto",
}
